The ``4-print_square`` module
======================

Using ``print_square``
----------------------

This is an example text file in reStructuredText format.  First import
``print_square`` from the ``4-print_square`` module:

    >>> print_square = __import__('4-print_square').print_square

Now use it:
    Test if the size argument is positive, size >= 0:
    >>> print_square(4)
    ####
    ####
    ####
    ####

    >>> print_square(10)
    ##########
    ##########
    ##########
    ##########
    ##########
    ##########
    ##########
    ##########
    ##########
    ##########

    >>> print_square(0)

    >>> print_square(1)
    #

    Test if the size argument is negative, size < 0:
    >>> print_square(-1)
    Traceback (most recent call last):
    ValueError: size must be >= 0

    Test if there is more than 1 argument:
    >>> print_square(4, 8)
    Traceback (most recent call last):
    TypeError: print_square() takes 1 positional argument but 2 were given

    Test if the size argument is not an integer but a string:
    >>> print_square("huuuuhhg")
    Traceback (most recent call last):
    TypeError: size must be an integer

    Test if there is no argument:
    >>> print_square()
    Traceback (most recent call last):
    TypeError: print_square() missing 1 required positional argument: 'size'

    Test if the size argument is not an integer but a float:
    >>> print_square(7.9)
    Traceback (most recent call last):
    TypeError: size must be an integer

    Test if the size argument is not an integer but a negative float:
    >>> print_square(-8.1)
    Traceback (most recent call last):
    TypeError: size must be an integer

    Test for infinty:
    >>> print_square(int('inf'))
    Traceback (most recent call last):
    ValueError: invalid literal for int() with base 10: 'inf'

    Test for infinity wth float:
    >>> print_square(float('inf'))
    Traceback (most recent call last):
    TypeError: size must be an integer

    Test for overflow:
    >>> print_square(9999999999999999999999999999)
    Traceback (most recent call last):
    OverflowError: cannot fit 'int' into an index-sized integer

    Test for negative numbers:
    >>> print_square(-1)
    Traceback (most recent call last):
    ValueError: size must be >= 0

    Test for negative numbers:
    >>> print_square("hjhsk")
    Traceback (most recent call last):
    TypeError: size must be an integer
