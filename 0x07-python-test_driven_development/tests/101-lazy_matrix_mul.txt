The ``101-lazy_matrix_mul`` module
======================

Using ``lazy_matrix_mul``
----------------------

This is an example text file in reStructuredText format.  First import
``lazy_matrix_mul`` from the ``101-lazy_matrix_mul`` module:

    >>> lazy_matrix_mul = __import__('101-lazy_matrix_mul').lazy_matrix_mul

Now use it:

Test for valid input:
     >>> lazy_matrix_mul([[1, 2], [3, 4]], [[1, 2], [3, 4]])
     array([[ 7, 10],
            [15, 22]])

Test for valid input 2:
     >>> lazy_matrix_mul([[1, 2]], [[3, 4], [5, 6]])
     array([[13, 16]])

Test for string in matrix row:
     >>> lazy_matrix_mul([[1, 2], [3, 4]], [[1, "jkjk"], [3, 4]])
     Traceback (most recent call last):
     ValueError: data type must provide an itemsize

Test for no argument:
     >>> lazy_matrix_mul()
     Traceback (most recent call last):
     TypeError: lazy_matrix_mul() missing 2 required positional arguments: 'm_a' and 'm_b'

Test for 1 less argument:
     >>> lazy_matrix_mul([[1, 2], [3, 4]])
     Traceback (most recent call last):
     TypeError: lazy_matrix_mul() missing 1 required positional argument: 'm_b'

Test if there are negative numbers:
     >>> lazy_matrix_mul([[-1, -2], [-3, -4]], [[1, 2], [3, 4]])
     array([[ -7, -10],
            [-15, -22]])

Test if there are float numbers:
     >>> lazy_matrix_mul([[1, 2], [3, 4.0]], [[1, 2.0], [3.0, 4]])
     array([[ 7., 10.],
            [15., 22.]])

Test if the 2nd argument is a string:
     >>> lazy_matrix_mul([[1, 2], [3, 4]], "")
     Traceback (most recent call last):
     TypeError: m_b must be a list

Test if the 1st argument is a string:
     >>> lazy_matrix_mul("", [[1, 2], [3, 4]])
     Traceback (most recent call last):
     TypeError: m_a must be a list

Test if the row lengths are not the same in the 1st argument:
     >>> lazy_matrix_mul([[1, 2], [3, 4], [7, 2]], [[1, 2], [3, 4]])
     array([[ 7, 10],
            [15, 22],
            [13, 22]])

Test if the row lengths are not the same in the 2nd argument:
     >>> lazy_matrix_mul([[1, 2], [3, 4]], [[1, 2], [3, 4], [7, 2]])
     Traceback (most recent call last):
     ValueError: shapes (2,2) and (3,2) not aligned: 2 (dim 1) != 3 (dim 0)

Test if the matrix empty in the 1st argument:
     >>> lazy_matrix_mul([[]], [[1, 2], [3, 4]])
     Traceback (most recent call last):
     ValueError: m_a can't be empty

Test if the matrix empty in the 2nd argument:
     >>> lazy_matrix_mul([[1, 2], [3, 4]], [[]])
     Traceback (most recent call last):
     ValueError: m_b can't be empty

Test if the list empty in the 1st argument:
     >>> lazy_matrix_mul([], [[1, 2], [3, 4]])
     Traceback (most recent call last):
     ValueError: m_a can't be empty

Test if the matrix empty in the 2nd argument:
     >>> lazy_matrix_mul([[1, 2], [3, 4]], [])
     Traceback (most recent call last):
     ValueError: m_b can't be empty
